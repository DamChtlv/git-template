name: üöÄ Deploy preprod on FTP

# Variables: https://docs.github.com/fr/actions/writing-workflows/choosing-what-your-workflow-does/store-information-in-variables#defining-environment-variables-for-a-single-workflow
env:
  THEME_NAME: theme-name # TODO: Change this, should be similar to repo name
  DOMAIN: site-name.cht.lv # TODO: Change this
  EXCLUDE_FILES: ".prettierignore, .nvmrc, .env, *.log, .htaccess, .vscode/, .husky/, .git/, .github/, *.sql, logs/, /node_modules/, ./auth.json, cli/, cliff.toml, package.json, ./*vite, ./*.dist"

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for specific branches
  push:
    branches: [ release/preprod ]
    paths-ignore:
      - 'docs/**'
      - '.github/**'
      - 'README.m**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Prevent multiple executions of same workflow
concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    
    - name: üöö Get latest repo update
      uses: actions/checkout@v4

    - name: üöÄ Use Bun
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: latest
        
    # - name: üì¶ Cache node modules
    #   uses: actions/cache@v3
    #   with:
    #     path: wp-content/themes/val/node_modules
    #     key: ${{ runner.os }}-bun-${{ hashFiles('wp-content/themes/${{ env.THEME_NAME }}/bun.lockb') }}
    #     restore-keys: |
    #       ${{ runner.os }}-bun-${{ hashFiles('wp-content/themes/${{ env.THEME_NAME }}/package-lock.json') }}
    #       ${{ runner.os }}-bun-${{ hashFiles('wp-content/themes/${{ env.THEME_NAME }}/package.json') }}
    #       ${{ runner.os }}-bun-
          
    # - name: üì¶ Cache vendor
    #   uses: actions/cache@v3
    #   with:
    #     path: wp-content/themes/%%THEME_FOLDER%%/vendor
    #     key: ${{ runner.os }}-composer-${{ hashFiles('composer.lock') }}
    #     restore-keys: |
    #       ${{ runner.os }}-composer-

    # - name: ‚¨á Install dependencies (bun)
    #   run: |
    #     bun i --frozen-lockfile

    # - name: üî® Build (bun)
    #   run: |
    #     bun run build

    # Get the public IP of the runner
    - name: Public IP
      id: ip
      uses: haythem/public-ip@v1.3

    # Whitelist the public IP of the runner on the remote server by adding it to the SSH whitelist and wait 65 seconds for the IP to be whitelisted
    - name: Whitelist IP on hosting & delete old ones (o2switch)
      shell: bash
      run: |
        ENDPOINT='frontend/o2switch/o2switch-ssh-whitelist/index.live.php'

        echo "Get actual whitelisted IPs..."
        UNIQUE_IPS=$(curl -sX GET "https://${{ secrets.REMOTE_USER }}:${{ secrets.URL_ENCODED_PASSWORD }}@${{ secrets.REMOTE_HOST }}:2083/$ENDPOINT?r=list" | jq -r '.data.list[] | .address' | sort -u)
        for address in $UNIQUE_IPS; do
          if [[ $address == "${{ secrets.IP_TO_KEEP }}" ]]; then
              echo "Keep this IP, go to the next..."
              continue
          fi
          echo "Delete this IP: $address (in & out)"
          curl -sX GET "https://${{ secrets.REMOTE_USER }}:${{ secrets.URL_ENCODED_PASSWORD }}@${{ secrets.REMOTE_HOST }}:2083/$ENDPOINT?r=remove&address=$address&direction=in&port=22" | jq
          sleep 3
          curl -sX GET "https://${{ secrets.REMOTE_USER }}:${{ secrets.URL_ENCODED_PASSWORD }}@${{ secrets.REMOTE_HOST }}:2083/$ENDPOINT?r=remove&address=$address&direction=out&port=22" | jq
          sleep 3
        done
        echo "All non-whitelisted IPs deleted!"

        echo "Attempt to whitelist IP..."
        curl -sX POST -d 'whitelist[address]=${{ steps.ip.outputs.ipv4 }}' -d 'whitelist[port]=22' "https://${{ secrets.REMOTE_USER }}:${{ secrets.URL_ENCODED_PASSWORD }}@${{ secrets.REMOTE_HOST }}:2083/$ENDPOINT?r=add" | jq
        echo "...IP Whitelisted!"

    # Deploy the develop branch to the preprod target
    - name: üìÅ Sync files using SSH (staging)
      uses: easingthemes/ssh-deploy@main
      with:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        ARGS: "-rlgoDzvc -i --delete-after"
        SOURCE: "wp-content/themes/${{ env.THEME_NAME }}/"
        REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
        REMOTE_USER: ${{ secrets.REMOTE_USER }}
        TARGET: "$DOMAIN/wp-content/themes/${{ env.THEME_NAME }}"
        EXCLUDE: ${{ env.EXCLUDE_FILES }}
        SCRIPT_BEFORE: |
          whoami
        SCRIPT_AFTER: |
          whoami
          echo $RSYNC_STDOUT

    # Doc: https://github.com/kevinpainchaud/simple-ftp-deploy-action
    # - name: üìÅ Sync files (preprod)
    #   if: github.ref == 'refs/heads/release/preprod'
    #   uses: damchtlv/simple-ftp-deploy-action@v1.0.0
    #   with:
    #     ftp_host: ${{ secrets.PREPROD_FTP_HOST }}
    #     ftp_username: ${{ secrets.PREPROD_FTP_USER }}
    #     ftp_password: ${{ secrets.PREPROD_FTP_PASS }}
    #     local_source_dir: "wp-content/themes/%%THEME_FOLDER%%" # TODO: update theme path !!
    #     dist_target_dir: "%%SITE_URL%%/wp-content/themes/%%THEME_FOLDER%%" # TODO: update theme path !!
    #     exclude: "'^logs/' '^README.md' '^.git/' '^.github/' '^node_modules/'"
    #     other_flags: "--only-newer --ignore-time"

    # - name: üßπ Post deploy action
    #   uses: fjogeleit/http-request-action@v1.14.1
    #   with:
    #     url: 'https://%%SITE_URL%%/wp-json/damchtlv/v1/post-deploy' # TODO: update URL !!
    #     method: 'GET'
    #     timeout: 60000
