# git-cliff ~ default configuration file
# https://git-cliff.org/docs/configuration
#
# Lines starting with "#" are comments.
# Configuration options are organized into tables and keys.
# See documentation for more information on available options.

[changelog]
# changelog header
header = """
# Changelog\n
All notable changes to this project will be documented in this file.\n
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for commit in commits %}
        - {% if commit.scope %}*({{ commit.scope }})* {% endif %}\
            {% if commit.breaking %}[**⚠️ CHANGE**] {% endif %}\
            {{ commit.message | upper_first }} ([{{ commit.id | truncate(length=7, end="") }}]({{ commit.id }}))\
    {% endfor %}
{% endfor %}\n
"""
# template for the changelog footer
footer = """
<!-- generated by git-cliff -->
"""
# remove the leading and trailing s
trim = true
# postprocessors
postprocessors = [
  # { pattern = '<REPO>', replace = "https://github.com/DamChtlv/git-template" }, # replace repository URL
]

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
  # Replace fancy emoji commit msg by basic text
  { pattern = '✨ Feat', replace = "feat"},
  { pattern = '🐛 Fix', replace = "fix"},
  { pattern = '🚜 Ticket', replace = "ticket"},
  { pattern = '🔨 Refact', replace = "refact"},
  { pattern = '📚 Doc', replace = "doc"},
  { pattern = '🐣 First', replace = "first"},
  { pattern = '🎨 Style', replace = "style"},
  { pattern = '🧪 Test', replace = "test"},
  { pattern = '🤖 CI', replace = "ci"},
  { pattern = '🔁 Revert', replace = "revert"},
]
# regex for parsing and grouping commits
commit_parsers = [
  { message = "^feat|^Feat|^✨ Feat", group = "<!-- 0 -->🚀 Features" },
  { message = "^fix|^Fix|^🐛 Fix", group = "<!-- 1 -->🐛 Bugs fixed" },
  { message = "^ticket|^Ticket|^client|^Client|^🚜 Ticket", group = "<!-- 2 -->🚜 Ticket" },
  { message = "^update|^refact|^maj|^Update|^Refact|^Maj|^🔨 Refact", group = "<!-- 6 -->🔨 Update" },
  { message = "^doc|^Doc|^📚 Doc", group = "<!-- 3 -->📚 Documentation" },
  { message = "^init|^Init|^first|^First|^🐣 First", group = "<!-- 4 -->💡 Initialisation" },
  { message = "^style|^Style|^🎨 Style", group = "<!-- 5 -->🎨 Style" },
  { message = "^test|^Test|^🧪 Test", group = "<!-- 7 -->🧪 Testing" },
  { message = "^chore|^Chore|^ci|^CI|^🤖 CI", group = "<!-- 8 -->⚙️ Miscellaneous Tasks (CI...)" },
  { message = "^revert|^Revert|^🔁 Revert", group = "<!-- 9 -->◀️ Revert" },
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = false
# regex for matching git tags
# tag_pattern = "v[0-9].*"
# regex for skipping tags
# skip_tags = ""
# regex for ignoring tags
# ignore_tags = ""
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
# limit the number of commits included in the changelog.
# limit_commits = 42
